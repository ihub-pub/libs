[versions]
hutool = '5.8.38'
mapstruct = '1.6.3'
mapstruct-plus = '1.4.8'
fastjson = '2.0.57'
spring-boot = '3.5.3'
spring-cloud = '2025.0.0'
spring-cloud-alibaba = '2023.0.3.3'
spring-boot-admin = '3.5.0'
pmd = '7.14.0'
snailjob = '1.5.0'
skywalking-toolkit = '9.4.0'
therapi-javadoc = '0.15.0'
mpe = '3.5.12-EXT861'
easy-query = '3.0.21'
warm-flow = '1.7.3'
easy-trans = '3.1.2'

[libraries]
# bom libs
ihub-integration-bom = { module = 'pub.ihub.integration:ihub-bom', version = '0.1.12' }
ihub-module-bom = { module = 'pub.ihub.module:ihub-bom', version = '0.2.2' }
hutool-bom = { module = 'cn.hutool:hutool-bom', version.ref = 'hutool' }
mybatis-plus-bom = { module = 'com.baomidou:mybatis-plus-bom', version = '3.5.12' }
spring-ai-bom = { module = 'org.springframework.ai:spring-ai-bom', version = '1.0.0' }
spock-bom = { module = 'org.spockframework:spock-bom', version = '2.3-groovy-4.0' }
sa-token-bom = { module = 'cn.dev33:sa-token-bom', version = '1.44.0' }
springdoc-openapi-bom = { module = 'org.springdoc:springdoc-openapi-bom', version = '2.8.9' }
anyline-dependency = { module = 'org.anyline:anyline-dependency', version = '8.7.2-20250603' }
spring-boot-admin-dependencies = { module = 'de.codecentric:spring-boot-admin-dependencies', version.ref = 'spring-boot-admin' }
spring-cloud-dependencies = { module = 'org.springframework.cloud:spring-cloud-dependencies', version.ref = 'spring-cloud' }
spring-cloud-alibaba-dependencies = { module = 'com.alibaba.cloud:spring-cloud-alibaba-dependencies', version.ref = 'spring-cloud-alibaba' }
spring-boot-dependencies = { module = 'org.springframework.boot:spring-boot-dependencies', version.ref = 'spring-boot' }
#dante-cloud-dependencies = { module = 'cn.herodotus.engine:dependencies', version = '3.4.1.0' }
# 动态可监控线程
dynamic-tp-dependencies = { module = 'org.dromara.dynamictp:dynamic-tp-dependencies', version = '1.2.2' }

# native
#solon-bom = { module = 'org.noear:solon-parent', version = '3.0.5' }
#quarkus-dependencies = { module = 'io.quarkus:quarkus-bom', version = '3.17.5' }

# ddd libs
jmolecules-bom = { module = 'org.jmolecules:jmolecules-bom', version = '2023.3.2' }
spring-modulith-bom = { module = 'org.springframework.modulith:spring-modulith-bom', version = '1.4.1' }
#cola-bom = { module = 'com.alibaba.cola:cola-components-bom', version = '5.0.0' }
#axon-bom = { module = 'org.axonframework:axon-bom', version = '4.10.4' }

# Mybatis-Plus-Ext
mpe-annotation = { module = 'org.dromara.mpe:mybatis-plus-ext-annotation', version.ref = 'mpe' }
mpe-autotable-annotation = { module = 'org.dromara.mpe:mybatis-plus-ext-autotable-annotation', version.ref = 'mpe' }
mpe-actable-core = { module = 'org.dromara.mpe:mybatis-plus-ext-actable-core', version.ref = 'mpe' }
mpe-autotable-core = { module = 'org.dromara.mpe:mybatis-plus-ext-autotable-core', version.ref = 'mpe' }
mpe-processor = { module = 'org.dromara.mpe:mybatis-plus-ext-processor', version.ref = 'mpe' }
mpe-bind = { module = 'org.dromara.mpe:mybatis-plus-ext-bind', version.ref = 'mpe' }
mpe-datasource = { module = 'org.dromara.mpe:mybatis-plus-ext-datasource', version.ref = 'mpe' }
mpe-condition = { module = 'org.dromara.mpe:mybatis-plus-ext-condition', version.ref = 'mpe' }
mpe-spring-boot-starter = { module = 'org.dromara.mpe:mybatis-plus-ext-spring-boot-starter', version.ref = 'mpe' }
mpe-spring-boot3-starter = { module = 'org.dromara.mpe:mybatis-plus-ext-spring-boot3-starter', version.ref = 'mpe' }

# easy-query libs
eq-sql-core = { module = 'com.easy-query:sql-core', version.ref = 'easy-query' }
eq-sql-mysql = { module = 'com.easy-query:sql-mysql', version.ref = 'easy-query' }
eq-sql-api-proxy = { module = 'com.easy-query:sql-api-proxy', version.ref = 'easy-query' }
eq-sql-api4j = { module = 'com.easy-query:sql-api4j', version.ref = 'easy-query' }
eq-sql-processor = { module = 'com.easy-query:sql-processor', version.ref = 'easy-query' }
eq-sql-ksp-processor = { module = 'com.easy-query:sql-ksp-processor', version.ref = 'easy-query' }
eq-sql-springboot-starter = { module = 'com.easy-query:sql-springboot-starter', version.ref = 'easy-query' }
eq-sql-kt-springboot-starter = { module = 'com.easy-query:sql-kt-springboot-starter', version.ref = 'easy-query' }
eq-sql-cache = { module = 'com.easy-query:sql-cache', version.ref = 'easy-query' }
eq-all = { module = 'com.easy-query:easy-query-all', version.ref = 'easy-query' }

# log libs
commons-logging = { module = 'commons-logging:commons-logging' }
log4j = { module = 'log4j:log4j' }
slf4j-api = { module = 'org.slf4j:slf4j-api' }
log4j-core = { module = 'org.apache.logging.log4j:log4j-core' }
slf4j-jcl = { module = 'org.slf4j:slf4j-jcl' }
slf4j-log4j12 = { module = 'org.slf4j:slf4j-log4j12' }
jul-to-slf4j = { module = 'org.slf4j:jul-to-slf4j' }
log4j-over-slf4j = { module = 'org.slf4j:log4j-over-slf4j' }
jcl-over-slf4j = { module = 'org.slf4j:jcl-over-slf4j' }

# mapstruct libs
mapstruct = { module = 'org.mapstruct:mapstruct', version.ref = 'mapstruct' }
mapstruct-processor = { module = 'org.mapstruct:mapstruct-processor', version.ref = 'mapstruct' }
mapstruct-plus-pom = { module = 'io.github.linpeilie:mapstruct-plus-pom', version.ref = 'mapstruct-plus' }
mapstruct-plus-processor = { module = 'io.github.linpeilie:mapstruct-plus-processor', version.ref = 'mapstruct-plus' }
lombok-mapstruct-binding = { module = 'org.projectlombok:lombok-mapstruct-binding', version = '0.2.0' }

# groovy libs
groovy-core = { module = 'org.apache.groovy:groovy' }
groovy-datetime = { module = 'org.apache.groovy:groovy-datetime' }
groovy-dateutil = { module = 'org.apache.groovy:groovy-dateutil' }
groovy-groovydoc = { module = 'org.apache.groovy:groovy-groovydoc' }
groovy-json = { module = 'org.apache.groovy:groovy-json' }
groovy-nio = { module = 'org.apache.groovy:groovy-nio' }
groovy-sql = { module = 'org.apache.groovy:groovy-sql' }
groovy-templates = { module = 'org.apache.groovy:groovy-templates' }
groovy-xml = { module = 'org.apache.groovy:groovy-xml' }

# jmolecules libs
jmolecules-ddd = { module = 'org.jmolecules:jmolecules-ddd' }
jmolecules-events = { module = 'org.jmolecules:jmolecules-events' }
jmolecules-cqrs = { module = 'org.jmolecules:jmolecules-cqrs-architecture' }
jmolecules-layered = { module = 'org.jmolecules:jmolecules-layered-architecture' }
jmolecules-onion = { module = 'org.jmolecules:jmolecules-onion-architecture' }
jmolecules-spring = { module = 'org.jmolecules.integrations:jmolecules-spring' }
jmolecules-jpa = { module = 'org.jmolecules.integrations:jmolecules-jpa' }
jmolecules-jackson = { module = 'org.jmolecules.integrations:jmolecules-jackson' }
jmolecules-archunit = { module = 'org.jmolecules.integrations:jmolecules-archunit' }

# test libs
junit-jupiter = { module = 'org.junit.jupiter:junit-jupiter' }
spock-spring = { module = 'org.spockframework:spock-spring' }
spock-reports = { module = 'com.athaydes:spock-reports', version = '2.5.1-groovy-4.0' }
spring-boot-starter-test = { module = 'org.springframework.boot:spring-boot-starter-test' }

# verification libs
pmd-ant = { module = 'net.sourceforge.pmd:pmd-ant', version.ref = 'pmd' }
pmd-java = { module = 'net.sourceforge.pmd:pmd-java', version.ref = 'pmd' }
pmd-groovy = { module = 'net.sourceforge.pmd:pmd-groovy', version.ref = 'pmd' }
pmd-ali = { module = 'com.alibaba.p3c:p3c-pmd', version = '2.1.1' }

# SnailJob libs
snail-job-client-starter = { module = 'com.aizuda:snail-job-client-starter', version.ref = 'snailjob' }
snail-job-client-job-core = { module = 'com.aizuda:snail-job-client-job-core', version.ref = 'snailjob' }
snail-job-server-starter = { module = 'com.aizuda:snail-job-server-starter', version.ref = 'snailjob' }

# skywalking libs
apm-toolkit-logback = { module = 'org.apache.skywalking:apm-toolkit-logback-1.x', version.ref = 'skywalking-toolkit' }
apm-toolkit-trace = { module = 'org.apache.skywalking:apm-toolkit-trace', version.ref = 'skywalking-toolkit' }

# therapi libs
therapi-runtime-javadoc = { module = 'com.github.therapi:therapi-runtime-javadoc', version.ref = 'therapi-javadoc' }
therapi-runtime-javadoc-scribe = { module = 'com.github.therapi:therapi-runtime-javadoc-scribe', version.ref = 'therapi-javadoc' }

# warm flow libs
warm-flow-m-sb = { module = 'org.dromara.warm:warm-flow-mybatis-sb-starter', version.ref = 'warm-flow' }
warm-flow-m-sb3 = { module = 'org.dromara.warm:warm-flow-mybatis-sb3-starter', version.ref = 'warm-flow' }
warm-flow-m-solon = { module = 'org.dromara.warm:warm-flow-mybatis-solon-starter', version.ref = 'warm-flow' }
warm-flow-mp-sb = { module = 'org.dromara.warm:warm-flow-mybatis-plus-sb-starter', version.ref = 'warm-flow' }
warm-flow-mp-sb3 = { module = 'org.dromara.warm:warm-flow-mybatis-plus-sb3-starter', version.ref = 'warm-flow' }
warm-flow-mp-solon = { module = 'org.dromara.warm:warm-flow-mybatis-plus-solon-starter', version.ref = 'warm-flow' }
warm-flow-ui-sb = { module = 'org.dromara.warm:warm-flow-plugin-ui-sb-web', version.ref = 'warm-flow' }
warm-flow-ui-solon = { module = 'org.dromara.warm:warm-flow-plugin-ui-solon-web', version.ref = 'warm-flow' }

# 数据翻译
easy-trans-anno = { module = 'org.dromara:easy-trans-anno', version.ref = 'easy-trans' }
easy-trans-service = { module = 'org.dromara:easy-trans-service', version.ref = 'easy-trans' }
easy-trans-spring-boot = { module = 'org.dromara:easy-trans-spring-boot-starter', version.ref = 'easy-trans' }
easy-trans-beetl-sql = { module = 'org.dromara:easy-trans-beetl-sql-extend', version.ref = 'easy-trans' }
easy-trans-mybatis-plus = { module = 'org.dromara:easy-trans-mybatis-plus-extend', version.ref = 'easy-trans' }
easy-trans-mybatis-flex = { module = 'org.dromara:easy-trans-mybatis-flex-extend', version.ref = 'easy-trans' }
easy-trans-tk = { module = 'org.dromara:easy-trans-tk-extend', version.ref = 'easy-trans' }

# webjars libs
#webjars-layui = { module = 'org.webjars:layui', version = '2.9.18' }
#webjars-jquery = { module = 'org.webjars:jquery', version = '3.7.1' }
#webjars-crypto = { module = 'org.webjars.npm:crypto-js', version = '4.2.0' }

# other libs
hutool-all = { module = 'cn.hutool:hutool-all', version.ref = 'hutool' }
fastjson = { module = 'com.alibaba.fastjson2:fastjson2', version.ref = 'fastjson' }
fastjson-extension = { module = 'com.alibaba.fastjson2:fastjson2-extension', version.ref = 'fastjson' }
fastjson-extension-spring = { module = 'com.alibaba.fastjson2:fastjson2-extension-spring6', version.ref = 'fastjson' }
fastjson-kotlin = { module = 'com.alibaba.fastjson2:fastjson2-kotlin', version.ref = 'fastjson' }
fastjson1 = { module = 'com.alibaba:fastjson', version.ref = 'fastjson' }
justauth = { module = 'me.zhyd.oauth:JustAuth', version = '1.16.7' }
easyexcel = { module = 'com.alibaba:easyexcel', version = '4.0.3' }
redisson = { module = 'org.redisson:redisson-spring-boot-starter', version = '3.50.0' }
lock4j-redisson = { module = 'com.baomidou:lock4j-redisson-spring-boot-starter', version = '2.2.7' }
sms4j = { module = 'org.dromara.sms4j:sms4j-spring-boot-starter', version = '3.3.5' }
dynamic-datasource = { module = 'com.baomidou:dynamic-datasource-spring-boot3-starter', version = '4.3.1' }
swagger-core = { module = 'io.swagger.core.v3:swagger-core-jakarta', version = '2.2.34' }

[bundles]
platform = [
    'ihub-integration-bom', 'ihub-module-bom', 'hutool-bom', 'jmolecules-bom', 'spock-bom', 'sa-token-bom',
    'springdoc-openapi-bom', 'mybatis-plus-bom', 'spring-modulith-bom', 'spring-ai-bom', 'spring-boot-admin-dependencies',
    'spring-cloud-dependencies', 'spring-cloud-alibaba-dependencies', 'spring-boot-dependencies',
    'mapstruct-plus-pom', 'dynamic-tp-dependencies', 'anyline-dependency'
]
constraints = [
    'hutool-all', 'fastjson', 'fastjson-extension', 'fastjson-extension-spring', 'fastjson-kotlin', 'fastjson1', 'swagger-core',
    'pmd-ant', 'pmd-java', 'pmd-groovy', 'pmd-ali', 'spock-reports', 'justauth', 'easyexcel', 'redisson', 'lock4j-redisson',
    'sms4j', 'dynamic-datasource', 'mapstruct', 'mapstruct-processor', 'mapstruct-plus-processor', 'lombok-mapstruct-binding',
    'snail-job-client-starter', 'snail-job-server-starter', 'snail-job-client-job-core',
    'apm-toolkit-logback', 'apm-toolkit-trace', 'therapi-runtime-javadoc', 'therapi-runtime-javadoc-scribe',
    'mpe-annotation', 'mpe-autotable-annotation', 'mpe-actable-core', 'mpe-autotable-core', 'mpe-processor',
    'mpe-bind', 'mpe-datasource', 'mpe-condition', 'mpe-spring-boot-starter', 'mpe-spring-boot3-starter',
    'eq-sql-core', 'eq-sql-mysql', 'eq-sql-api-proxy', 'eq-sql-api4j', 'eq-sql-processor', 'eq-sql-ksp-processor',
    'eq-sql-springboot-starter', 'eq-sql-kt-springboot-starter', 'eq-sql-cache', 'eq-all',
    'warm-flow-m-sb', 'warm-flow-m-sb3', 'warm-flow-m-solon', 'warm-flow-mp-sb', 'warm-flow-mp-sb3', 'warm-flow-mp-solon',
    'warm-flow-ui-sb', 'warm-flow-ui-solon', 'easy-trans-anno', 'easy-trans-service', 'easy-trans-spring-boot',
    'easy-trans-beetl-sql', 'easy-trans-mybatis-plus', 'easy-trans-mybatis-flex', 'easy-trans-tk'
]

groovy = [
    'groovy-core', 'groovy-datetime', 'groovy-dateutil', 'groovy-groovydoc', 'groovy-json',
    'groovy-nio', 'groovy-sql', 'groovy-templates', 'groovy-xml'
]
slf4j-runtime = ['jul-to-slf4j', 'log4j-over-slf4j', 'jcl-over-slf4j']
jmolecules-cqrs = ['jmolecules-ddd', 'jmolecules-events', 'jmolecules-cqrs']
jmolecules-layered = ['jmolecules-ddd', 'jmolecules-events', 'jmolecules-layered']
jmolecules-onion = ['jmolecules-ddd', 'jmolecules-events', 'jmolecules-onion']
jmolecules-integrations = ['jmolecules-spring', 'jmolecules-jpa', 'jmolecules-jackson']

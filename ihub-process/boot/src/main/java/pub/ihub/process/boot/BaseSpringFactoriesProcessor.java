/*
 * Copyright (c) 2022 Henry 李恒 (henry.box@outlook.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pub.ihub.process.boot;

import lombok.SneakyThrows;
import pub.ihub.process.BaseJavapoetProcessor;

import javax.tools.FileObject;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static java.nio.charset.StandardCharsets.UTF_8;
import static javax.tools.StandardLocation.SOURCE_OUTPUT;

/**
 * spring.factories基础注解处理器
 *
 * @author henry
 */
public abstract class BaseSpringFactoriesProcessor extends BaseJavapoetProcessor {

	protected static final String FACTORIES_RESOURCE = "META-INF/spring.factories";
	protected final Map<String, Set<String>> factories = new HashMap<>();

	protected void addFactories(String key, String... values) {
		Set<String> defaultValues = factories.getOrDefault(key, new HashSet<>());
		defaultValues.addAll(List.of(values));
		factories.put(key, defaultValues);
	}

	@Override
	protected void processingOver() throws IOException {
		// 生成spring.factories
		List<String> lines = new ArrayList<>();
		lines.add("# Generated by ihub-process https://ihub.pub");
		factories.forEach((k, v) -> {
			lines.add(k + "=\\");
			lines.add(String.join(",\\\n", v));
		});
		FileObject resource = mFiler.createResource(SOURCE_OUTPUT, "", FACTORIES_RESOURCE);
		try (OutputStream out = resource.openOutputStream()) {
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, UTF_8));
			for (String line : lines) {
				writer.write(line);
				writer.newLine();
			}
			writer.flush();
		}
	}

}

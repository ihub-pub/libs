/*
 * Copyright (c) 2022 Henry 李恒 (henry.box@outlook.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pub.ihub.process.boot;

import com.google.testing.compile.Compilation;
import com.google.testing.compile.Compiler;
import com.google.testing.compile.JavaFileObjects;
import lombok.SneakyThrows;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Answers;
import org.mockito.Mockito;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import java.io.IOException;

import static com.google.testing.compile.CompilationSubject.assertThat;
import static javax.tools.StandardLocation.CLASS_OUTPUT;
import static pub.ihub.process.boot.AutoConfigurationProcessor.IMPORTS_RESOURCE;
import static pub.ihub.process.boot.SpringFactoriesProcessor.FACTORIES_RESOURCE;

/**
 * @author liheng
 */
@DisplayName("启动环境处理器测试")
class BootProcessorTest {

	@DisplayName("配置环境处理器测试-成功")
	@Test
	void configEnvironment() {
		Compilation compilation =
			Compiler.javac()
				.withProcessors(new ConfigEnvironmentProcessor())
				.compile(JavaFileObjects.forResource("test/DemoProperties.java"),
					JavaFileObjects.forResource("test/DemoAutoConfiguration.java"));
		assertThat(compilation).succeededWithoutWarnings();
		assertThat(compilation)
			.generatedSourceFile("test/DemoConfigPostProcessor")
			.contentsAsUtf8String()
			.contains("public final class DemoConfigPostProcessor extends BaseConfigEnvironmentPostProcessor");
	}

	@DisplayName("spring.factories配置处理器-成功")
	@Test
	void springFactories() {
		Compilation compilation =
			Compiler.javac()
				.withProcessors(new SpringFactoriesProcessor())
				.compile(JavaFileObjects.forResource("test/DemoProperties.java"),
					JavaFileObjects.forResource("test/OtherConfigPostProcessor.java"));
		assertThat(compilation).succeededWithoutWarnings();
		assertThat(compilation)
			.generatedFile(CLASS_OUTPUT, FACTORIES_RESOURCE)
			.contentsAsUtf8String()
			.containsMatch("# Generated by ihub-process https://ihub.pub[\\S\\s]*" +
				"org.springframework.boot.env.EnvironmentPostProcessor=[\\S\\s]*" +
				"test.OtherConfigPostProcessor");
	}

	@SneakyThrows
	@DisplayName("spring.factories配置处理器-配置已存在")
	@Test
	void springFactoriesExists() {
		new SpringFactoriesProcessor() {
			@Override
			protected void processingOver() throws IOException {
				mFiler = Mockito.mock(Filer.class, Answers.RETURNS_MOCKS);
				messager = Mockito.mock(Messager.class);
				super.processingOver();
			}
		}.processingOver();
	}

	@DisplayName("自动配置处理器-成功")
	@Test
	void autoConfiguration() {
		Compilation compilation =
			Compiler.javac()
				.withProcessors(new AutoConfigurationProcessor())
				.compile(JavaFileObjects.forResource("test/DemoAutoConfiguration.java"),
					JavaFileObjects.forResource("test/OtherAutoConfiguration.java"));
		assertThat(compilation).succeeded();
		assertThat(compilation)
			.generatedFile(CLASS_OUTPUT, IMPORTS_RESOURCE)
			.contentsAsUtf8String()
			.containsMatch("# Generated by ihub-process https://ihub.pub[\\S\\s]*" +
				"test.DemoAutoConfiguration[\\S\\s]*" +
				"test.OtherAutoConfiguration");
	}

	@SneakyThrows
	@DisplayName("自动配置处理器-配置已存在")
	@Test
	void autoConfigurationExists() {
		new AutoConfigurationProcessor() {
			@Override
			protected void processingOver() throws IOException {
				mFiler = Mockito.mock(Filer.class, Answers.RETURNS_MOCKS);
				messager = Mockito.mock(Messager.class);
				super.processingOver();
			}
		}.processingOver();
	}

}
